---
title: "try2"
author: "Hongmei Zhang"
date: "2023-11-12"
output: html_document
---

```{r setup, include=FALSE}

library(knitr)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
library(scales)
library(plotly)
knitr::opts_knit$set(root.dir = "D:/Monash/Collaborative and reproducible practices/data")

rm(list=ls())

getwd()
setwd("D:/Monash/Collaborative and reproducible practices/data")

#Import the dataset.
data <- read.csv("agricultural_labor_land.csv")

data1 <- data.frame(data[(1:163),])

# Create a copy of the data frame
data_industry <- data.frame(data1)

summary(data1)
# Create a table with variable names for data1
variable_names <- data.frame(Variable = names(data1))
kable(variable_names, caption = "Variable Names of data1")

str(head(data1, 2))



data_state <- data.frame(data[(1:144),])

# Compare the industry employment, sales and services income difference by state
total_by_state <- aggregate(cbind(Employment, Wages_and_Salaries, Sales_and_services_income) ~ State, data = data_state, sum)

total_by_state <- data_state %>%
  group_by(State) %>%
  summarise(
    Employment = sum(Employment, na.rm = TRUE),
    Wages_Salaries = sum(Wages_and_Salaries, na.rm = TRUE),
    Sales_Services_Income = sum(Sales_and_services_income, na.rm = TRUE)
  )

long_data <- pivot_longer(total_by_state, cols = c(Employment, Wages_Salaries, Sales_Services_Income), names_to = "Variable", values_to = "Value")


state_sums <- long_data %>% 
  group_by(State, Variable) %>% 
  summarise(StateTotal = sum(Value), .groups = 'drop')

# Calculate the total for each category across all states
overall_sums <- long_data %>% 
  group_by(Variable) %>% 
  summarise(OverallTotal = sum(Value), .groups = 'drop')

# Join this information back to the state-level data
long_data <- left_join(state_sums, overall_sums, by = "Variable")

# Calculate the proportion for each state within each category
long_data <- long_data %>% 
  mutate(Share = StateTotal / OverallTotal)


# Create your ggplot object
p <- ggplot(long_data, aes(x = Share, y = Variable, fill = State)) +
  geom_bar(stat = "identity", position = "fill", width = 0.5) +
  scale_x_continuous(labels = scales::percent_format(accuracy = 1)) +
  labs(title = "State and territory share of industry indicators in 2021-2022",
       x = "Share (%)",
       y = "",
       fill = "State") +
  theme_minimal()

# Convert to a plotly interactive object
p_interactive <- ggplotly(p, tooltip = c("x", "fill"))

# Show the interactive plot
p_interactive



data2 <- data_state[, c("State", "Industry", "Wages_and_Salaries", "Sales_and_services_income")]

summary(data2)

# Display only the first 10 rows of data2 by using kable()
kable(head(data2, 10), caption = "First 10 rows of data2")

# Arrange by State and Employment, then get top 3 for each State
top_industries_by_state <- data2 %>%
  group_by(State) %>%
  arrange(State, desc(Sales_and_services_income)) %>%
  slice_max(n = 3, order_by = Sales_and_services_income) %>%
  ungroup()  # Ungroup the data after done grouped operations

# Reshape the data to long format for plotting
long_format <- top_industries_by_state %>%
  pivot_longer(cols = c("Wages_and_Salaries", "Sales_and_services_income"),
               names_to = "Metric", values_to = "Value")

# Plotting with ggplot2
ggplot(long_format, aes(x = State, y = Value, fill = Industry)) +
  geom_bar(stat = "identity", position = "dodge") + # Use 'dodge' to create side-by-side bars
  facet_wrap(~ Metric, scales = "free_y") + # Separate plots for Employment and Sales_and_services_income
  coord_flip() + # Flip the coordinates to make the bars horizontal
  labs(title = "Top 3 Industry Categories by State",
       y = "State", # Note the label swap
       x = "Value") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1), # Adjust the x-axis labels to 45 degree
    legend.position = "bottom" 
  )


```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r cars}
summary(cars)
```

## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
